(Program->Funcstate Program) 
(Funcstate->extern Type token ( Paramlist ) seperate) (Program->Funcdef Program) 
(1_6, extern) (Type->int) (2_6, printf) (40, () (Paramlist->Paramlist') (41, )) (51, ;) 
(Funcdef->Type token ( Paramlist ) Block) (Program->Funcdef Program) 
(1_3, int) 
(Paramlist'->Paramlist' , Type token) 
(Type->int) (2_5, print) (40, () (Paramlist->Paramlist') (41, )) (Block->{ Block' }) 
(Funcdef->Type token ( Paramlist ) Block) (Program->Funcdef Program) 
(Paramlist'->Type token) (55, ,) (Type->int) (2_3, num) 
(1_3, int) 
(Paramlist'->Paramlist' , Type token) 
(44, {) (Block'->Block' Ifelse) (45, }) 
(Type->int) (2_3, add) (40, () (Paramlist->Paramlist') (41, )) (Block->{ Block' }) 
(Funcdef->Type token ( Paramlist ) Block) (Program->Funcdef Program) 
(Type->Type *) (2_3, fmt) 
(1_3, int) 
(Paramlist'->Type token) (55, ,) (Type->int) (2_3, num) 
(Block'->Block' Statement) (Ifelse->If else Block) 
(1_3, int) 
(Paramlist'->Paramlist' , Type token) 
(44, {) (Block'->Block' Statement) (45, }) 
(Type->int) (2_3, sum) (40, () (Paramlist->Paramlist') (41, )) (Block->{ Block' }) 
(Funcdef->Type token ( Paramlist ) Block) (Program->int main ( ) Block) 
(Type->simple_type) (50, *) 
(Type->Type *) (2_3, fmt) 
(1_3, int) 
(Block'->Block' Statement) (Statement->Typedef) 
(If->if ( Expr ) Block) (1_4, else) (Block->{ Block' }) 
(Paramlist'->Type token) (55, ,) (Type->int) (2_1, r) 
(Block'->Block' If) (Statement->Return seperate) 
(1_3, int) 
(Paramlist'->Paramlist' , Type token) 
(44, {) (Block'->Block' Statement) (45, }) 
(Type->int) (2_8, for_test) (40, () (Paramlist->Paramlist') (41, )) (Block->{ Block' }) 
(1_3, int) (2_4, main) (40, () (41, )) (Block->{ Block' }) 
(1_4, char) 
(Type->simple_type) (50, *) 
(Block'->Block' Statement) (Statement->Assign seperate) 
(Typedef->Type token = number seperate) 
(1_2, if) (40, () (Expr->( Expr / Expr )) (41, )) (Block->{ Block' }) 
(44, {) (Block'->Block' Statement) (45, }) 
(Type->int) (2_1, l) 
(1_3, int) 
(Block'->Block' Statement) (If->if ( Expr ) Block) 
(Return->return Expr) (51, ;) 
(Paramlist'->Type token) (55, ,) (Type->int) (2_3, min) 
(Block'->Block' While) (Statement->Return seperate) 
(1_3, int) 
(Paramlist'->Type token) 
(44, {) (Block'->Block' Statement) (45, }) 
(44, {) (Block'->Block' Statement) (45, }) 
(1_4, char) 
(Block'->Statement) (Statement->Typedef) 
(Assign->token = ldquota string rdquota) (51, ;) 
(Type->int) (2_1, k) (10, =) (62, 4) (51, ;) 
(40, () (Expr->token) (32, >) (Expr->number) (41, )) 
(44, {) (Block'->Block' Ifelse) (45, }) 
(Block'->Block' Statement) (Statement->Return seperate) 
(1_3, int) 
(Block'->Statement) (Statement->Assign seperate) 
(1_2, if) (40, () (Expr->( Expr / Expr )) (41, )) (Block->{ Block' }) 
(1_6, return) (Expr->token) 
(Type->int) (2_3, max) 
(1_3, int) 
(Block'->Statement) (While->while ( Expr ) Block) 
(Return->return Expr) (51, ;) 
(Type->int) (2_3, max) 
(Block'->Block' For) (Statement->Return seperate) 
(Block'->Block' Statement) (Statement->Return seperate) 
(Statement->Typedef) 
(Typedef->Type token seperate) 
(2_4, fmt2) (10, =) (46, ") (60_9, k is %d\n) (47, ") 
(1_3, int) 
(2_1, k) 
(62, 1) 
(Block'->Statement) (Ifelse->If else Block) 
(Block'->Statement) (Statement->Assign seperate) 
(Return->return Expr) (51, ;) 
(Statement->Typedef) 
(Assign->token = Expr) (51, ;) 
(40, () (Expr->token) (31, <) (Expr->number) (41, )) 
(44, {) (Block'->Block' Statement) (45, }) 
(2_1, k) 
(1_3, int) 
(Statement->Typedef) 
(1_5, while) (40, () (Expr->( Expr / Expr )) (41, )) (Block->{ Block' }) 
(1_6, return) (Expr->token) 
(1_3, int) 
(Block'->Statement) (For->for ( Statement Statement Statement ) Block) 
(Return->return Expr) (51, ;) 
(Block'->Block' Statement) (Statement->Funccall seperate) 
(Return->return Expr) (51, ;) 
(Typedef->Type token = Funccall seperate) 
(Type->Type *) (2_4, fmt2) (51, ;) 
(Statement->Typedef) 
(If->if ( Expr ) Block) (1_4, else) (Block->{ Block' }) 
(Statement->Typedef) 
(Assign->token = Funccall) (51, ;) 
(1_6, return) (Expr->token) 
(Typedef->Type token = token seperate) 
(2_1, k) (10, =) (Expr->( Expr + Expr )) 
(2_1, k) 
(62, 10) 
(Block'->Statement) (Statement->Return seperate) 
(Typedef->Type token = number seperate) 
(40, () (Expr->token) (34, >=) (Expr->token) (41, )) 
(44, {) (Block'->Block' Statement) (45, }) 
(2_3, sum) 
(Statement->Typedef) 
(1_3, for) (40, () (Statement->Typedef) (Statement->Expr seperate) (Statement->Assign seperate) (41, )) (Block->{ Block' }) 
(1_6, return) (Expr->token) 
(Block'->Block' While) (Statement->Assign seperate) 
(Funccall->token ( Realparam )) (51, ;) 
(1_6, return) (Expr->number) 
(Type->int) (2_2, k1) (10, =) (Funccall->token ( Realparam )) (51, ;) 
(Type->simple_type) (50, *) 
(Typedef->Type token = number seperate) 
(1_2, if) (40, () (Expr->( Expr / Expr )) (41, )) (Block->{ Block' }) 
(44, {) (Block'->Block' Statement) (45, }) 
(Typedef->Type token = number seperate) 
(2_1, k) (10, =) (Funccall->token ( Realparam )) 
(2_1, k) 
(Type->int) (2_1, k) (10, =) (2_1, l) (51, ;) 
(40, () (Expr->token) (3, +) (Expr->token) (41, )) 
(Statement->Typedef) 
(Return->return Expr) (51, ;) 
(Type->int) (2_3, sum) (10, =) (62, 0) (51, ;) 
(2_3, max) 
(2_3, min) 
(Block'->Statement) (Statement->Assign seperate) 
(Typedef->Type token = number seperate) 
(Typedef->Type token = number seperate) 
(Expr->( Expr / Expr )) (51, ;) 
(Assign->token = Expr) (51, ;) 
(44, {) (Block'->Statement) (45, }) 
(2_3, sum) 
(Block'->Block' Statement) (While->while ( Expr ) Block) 
(Assign->token = Funccall) (51, ;) 
(2_6, printf) (40, () (Realparam->Realparam') (41, )) 
(62, 0) 
(1_3, int) 
(2_6, printf) (40, () (Realparam->Realparam') (41, )) 
(1_4, char) 
(Type->int) (2_1, k) (10, =) (62, 5) (51, ;) 
(40, () (Expr->( Expr + Expr )) (30, ==) (Expr->number) (41, )) 
(44, {) (Block'->Block' Statement) (45, }) 
(Block'->Block' Statement) (Statement->Return seperate) 
(Type->int) (2_1, k) (10, =) (62, 30) (51, ;) 
(2_6, printf) (40, () (Realparam->Realparam') (41, )) 
(1_3, int) 
(2_1, k) 
(2_1, r) 
(Typedef->Type token = Funccall seperate) 
(1_6, return) (Expr->token) 
(1_3, int) 
(Statement->Assign seperate) 
(Assign->token = Expr) (51, ;) 
(Type->int) (2_3, sum) (10, =) (62, 0) (51, ;) 
(Type->int) (2_1, i) (10, =) (62, 0) (51, ;) 
(40, () (Expr->token) (31, <) (Expr->token) (41, )) 
(2_1, i) (10, =) (Expr->( Expr + Expr )) 
(Statement->Assign seperate) 
(Block'->Block' Statement) (Statement->Assign seperate) 
(1_5, while) (40, () (Expr->( Expr / Expr )) (41, )) (Block->{ Block' }) 
(2_3, num) (10, =) (Funccall->token ( Realparam )) 
(Realparam'->Realparam' , Expr) 
(Realparam'->Realparam' , Expr) 
(1_3, int) 
(40, () (Expr->token) (3, +) (Expr->number) (41, )) 
(62, 10) 
(Block'->Block' Statement) (Statement->Return seperate) 
(Block'->Statement) (Statement->Assign seperate) 
(Return->return Expr) (51, ;) 
(1_3, int) 
(Realparam'->Realparam' , Expr) 
(Type->int) (2_1, m) (10, =) (Funccall->token ( Realparam )) (51, ;) 
(2_1, m) 
(Assign->token = Expr) (51, ;) 
(2_3, max) (10, =) (Expr->( Expr - Expr )) 
(1_3, int) 
(1_3, int) 
(2_1, i) 
(2_3, max) 
(40, () (Expr->token) (3, +) (Expr->number) (41, )) 
(Assign->token = Expr) (51, ;) 
(Block'->Block' Statement) (Statement->Funccall seperate) 
(Assign->token = Expr) (51, ;) 
(40, () (Expr->token) (31, <) (Expr->number) (41, )) 
(44, {) (Block'->Block' Statement) (45, }) 
(2_8, for_test) (40, () (Realparam->Realparam') (41, )) 
(Realparam'->Expr) (55, ,) (Expr->token) 
(Realparam'->Expr) (55, ,) (Expr->token) 
(2_1, k) 
(62, 5) 
(Block'->Block' Statement) (Statement->Funccall seperate) 
(Return->return Expr) (51, ;) 
(Statement->Typedef) 
(Assign->token = Funccall) (51, ;) 
(1_6, return) (Expr->token) 
(Realparam'->Expr) (55, ,) (Expr->token) 
(1_3, int) 
(2_3, add) (40, () (Realparam->Realparam') (41, )) 
(2_3, sum) (10, =) (Expr->( Expr + Expr )) 
(40, () (Expr->token) (4, -) (Expr->number) (41, )) 
(2_1, i) 
(62, 2) 
(2_3, sum) (10, =) (Expr->( Expr + Expr )) 
(Block'->Block' Statement) (Statement->Assign seperate) 
(Funccall->token ( Realparam )) (51, ;) 
(2_3, num) (10, =) (Expr->number) 
(2_3, num) 
(62, 10) 
(Block'->Block' Statement) (Statement->Assign seperate) 
(Realparam'->Expr) 
(Expr->token) 
(2_3, num) 
(Expr->token) 
(2_3, num) 
(Block'->Statement) (Statement->Assign seperate) 
(Funccall->token ( Realparam )) (51, ;) 
(1_6, return) (Expr->( Expr + Expr )) 
(Typedef->Type token = number seperate) 
(2_1, k) (10, =) (Funccall->token ( Realparam )) 
(2_1, k) 
(Expr->token) 
(2_1, k) 
(Realparam'->Realparam' , Expr) 
(40, () (Expr->token) (3, +) (Expr->token) (41, )) 
(2_3, max) 
(62, 1) 
(40, () (Expr->token) (3, +) (Expr->token) (41, )) 
(Block'->Block' Statement) (Statement->Funccall seperate) 
(Assign->token = Funccall) (51, ;) 
(2_6, printf) (40, () (Realparam->Realparam') (41, )) 
(62, 0) 
(Block'->Block' Statement) (Statement->Funccall seperate) 
(Assign->token = Expr) (51, ;) 
(Expr->number) 
(2_3, ftc) 
(2_3, fmt) 
(Statement->Typedef) 
(Assign->token = Expr) (51, ;) 
(2_6, printf) (40, () (Realparam->Realparam') (41, )) 
(40, () (Expr->token) (3, +) (Expr->number) (41, )) 
(Type->int) (2_1, k) (10, =) (62, 20) (51, ;) 
(2_6, printf) (40, () (Realparam->Realparam') (41, )) 
(2_4, fmt2) 
(Realparam'->Expr) (55, ,) (Expr->token) 
(2_3, sum) 
(2_3, max) 
(2_3, sum) 
(2_1, i) 
(Block'->Block' Statement) (Statement->Assign seperate) 
(Funccall->token ( Realparam )) (51, ;) 
(2_3, num) (10, =) (Funccall->token ( Realparam )) 
(Realparam'->Realparam' , Expr) 
(Block'->Statement) (Statement->Assign seperate) 
(Funccall->token ( Realparam )) (51, ;) 
(2_3, num) (10, =) (Expr->( Expr + Expr )) 
(62, 10) 
(Typedef->Type token = number seperate) 
(2_1, k) (10, =) (Expr->( Expr + Expr )) 
(Realparam'->Realparam' , Expr) 
(2_1, k) 
(62, 1) 
(1_3, int) 
(Realparam'->Realparam' , Expr) 
(Expr->token) 
(2_1, k) 
(Block'->Block' Statement) (Statement->Assign seperate) 
(Assign->token = Funccall) (51, ;) 
(2_6, printf) (40, () (Realparam->Realparam') (41, )) 
(2_3, sum) (40, () (Realparam->Realparam') (41, )) 
(Realparam'->Expr) (55, ,) (Expr->token) 
(Statement->Typedef) 
(Assign->token = Expr) (51, ;) 
(2_6, printf) (40, () (Realparam->Realparam') (41, )) 
(40, () (Expr->token) (3, +) (Expr->number) (41, )) 
(Type->int) (2_1, k) (10, =) (62, 10) (51, ;) 
(40, () (Expr->( Expr * Expr )) (3, +) (Expr->( Expr / Expr )) (41, )) 
(Realparam'->Expr) (55, ,) (Expr->token) 
(Realparam'->Expr) (55, ,) (Expr->token) 
(2_1, r) 
(Block'->Block' Statement) (Statement->Assign seperate) 
(Assign->token = Funccall) (51, ;) 
(2_3, num) (10, =) (Funccall->token ( Realparam )) 
(Realparam'->Realparam' , Expr) 
(Realparam'->Realparam' , Expr) 
(Expr->token) 
(2_3, num) 
(Typedef->Type token = number seperate) 
(2_1, k) (10, =) (Expr->( Expr * Expr )) 
(Realparam'->Realparam' , Expr) 
(2_3, num) 
(62, 1) 
(1_3, int) 
(40, () (Expr->token) (50, *) (Expr->token) (41, )) 
(40, () (Expr->token) (33, <=) (Expr->number) (41, )) 
(Expr->token) 
(2_1, k) 
(Expr->token) 
(2_1, k) 
(Block'->Block' Statement) (Statement->Assign seperate) 
(Assign->token = Funccall) (51, ;) 
(2_3, num) (10, =) (Funccall->token ( Realparam )) 
(2_3, add) (40, () (Realparam->Realparam') (41, )) 
(Realparam'->Expr) (55, ,) (Expr->token) 
(Realparam'->Expr) (55, ,) (Expr->number) 
(2_1, s) 
(Type->int) (2_1, k) (10, =) (62, 0) (51, ;) 
(40, () (Expr->token) (50, *) (Expr->token) (41, )) 
(Realparam'->Expr) (55, ,) (Expr->token) 
(2_1, k) 
(2_1, k) 
(2_1, k) 
(62, 12) 
(2_4, fmt2) 
(2_4, fmt2) 
(Block'->Block' Statement) (Statement->Assign seperate) 
(Assign->token = Expr) (51, ;) 
(2_3, num) (10, =) (Funccall->token ( Realparam )) 
(2_5, print) (40, () (Realparam->Realparam') (41, )) 
(Realparam'->Realparam' , Expr) 
(Expr->token) 
(2_3, num) 
(Expr->number) 
(62, 5) 
(1_3, int) 
(2_3, num) 
(2_3, num) 
(Expr->token) 
(2_1, k) 
(Block'->Block' Statement) (Statement->Assign seperate) 
(Assign->token = ldquota string rdquota) (51, ;) 
(2_3, num) (10, =) (Expr->( Expr / Expr )) 
(2_5, print) (40, () (Realparam->Realparam') (41, )) 
(Realparam'->Realparam' , Expr) 
(Realparam'->Expr) (55, ,) (Expr->number) 
(2_3, ret) 
(62, 10) 
(2_4, sqrt) 
(Block'->Block' Statement) (Statement->Assign seperate) 
(Assign->token = ldquota string rdquota) (51, ;) 
(2_3, ftc) (10, =) (46, ") (60_23, for test result is %d\n) (47, ") 
(40, () (Expr->number) (33, <=) (Expr->number) (41, )) 
(Realparam'->Realparam' , Expr) 
(Realparam'->Expr) (55, ,) (Expr->token) 
(Expr->number) 
(62, 1) 
(Block'->Block' Statement) (Statement->Assign seperate) 
(Assign->token = ldquota string rdquota) (51, ;) 
(2_2, fc) (10, =) (46, ") (60_15, float p is %f\n) (47, ") 
(62, 2) 
(62, 3) 
(Realparam'->Expr) (55, ,) (Expr->token) 
(Expr->token) 
(2_3, num) 
(62, 1) 
(Block'->Block' Statement) (Statement->Assign seperate) 
(Assign->token = ldquota string rdquota) (51, ;) 
(2_4, sqrt) (10, =) (46, ") (60_16, The sqrt is %d\n) (47, ") 
(Expr->token) 
(2_3, num) 
(2_3, fmt) 
(Block'->Block' Statement) (Statement->Assign seperate) 
(Assign->token = ldquota string rdquota) (51, ;) 
(2_1, s) (10, =) (46, ") (60_11, sum is %d\n) (47, ") 
(2_3, fmt) 
(Block'->Block' Statement) (Statement->Typedef) 
(Assign->token = ldquota string rdquota) (51, ;) 
(2_3, fmt) (10, =) (46, ") (60_10, hello %d\n) (47, ") 
(Block'->Block' Statement) (Statement->Typedef) 
(Typedef->Type token = number seperate) 
(2_3, ret) (10, =) (46, ") (60_21, The peibolaqi is %d\n) (47, ") 
(Block'->Block' Statement) (Statement->Typedef) 
(Typedef->Type token = number seperate) 
(Type->simple_type) (2_1, p) (10, =) (61, 10.230000) (51, ;) 
(Block'->Block' Statement) (Statement->Typedef) 
(Typedef->Type token seperate) 
(Type->int) (2_3, num) (10, =) (62, 10) (51, ;) 
(1_5, float) 
(Block'->Block' Statement) (Statement->Typedef) 
(Typedef->Type token seperate) 
(Type->Type *) (2_3, ftc) (51, ;) 
(1_3, int) 
(Block'->Block' Statement) (Statement->Typedef) 
(Typedef->Type token seperate) 
(Type->Type *) (2_2, fc) (51, ;) 
(Type->simple_type) (50, *) 
(Block'->Statement) (Statement->Typedef) 
(Typedef->Type token seperate) 
(Type->Type *) (2_4, sqrt) (51, ;) 
(Type->simple_type) (50, *) 
(1_4, char) 
(Statement->Typedef) 
(Typedef->Type token seperate) 
(Type->Type *) (2_1, s) (51, ;) 
(Type->simple_type) (50, *) 
(1_4, char) 
(Typedef->Type token seperate) 
(Type->Type *) (2_3, ret) (51, ;) 
(Type->simple_type) (50, *) 
(1_4, char) 
(Type->Type *) (2_3, fmt) (51, ;) 
(Type->simple_type) (50, *) 
(1_4, char) 
(Type->simple_type) (50, *) 
(1_4, char) 
(1_4, char) 
